{"version":3,"file":"static/js/960.063113c1.chunk.js","mappings":"uQAIMA,EAAAA,SAAAA,I,6BACJ,aAAc,kCACN,CACJC,SAAU,CACRC,KAAM,CACJC,MAAO,GAETC,KAAM,CACJD,MAAO,IAGXE,aAAY,8WAYZC,eAAc,+bAkBjB,C,iBAzCGN,CAA0BO,EAAAA,gBA6C1BC,EAAU,SAAAC,GACd,OAAO,IAAIC,EAAAA,SAAUC,iBAAiB,IAAIC,EAAAA,UAAUH,EAAGI,KAAKC,KAAK,EAAoB,EAAhBD,KAAKE,UAA+B,EAAhBF,KAAKE,SAAeF,KAAKG,IACnH,EAEKC,EAAqBC,EAAAA,YAAiB,WAQzCC,GAAQ,QAPTC,OAAAA,OAOS,MAPA,IAOA,MANTC,MAAAA,OAMS,MAND,GAMC,MALTC,MAAAA,OAKS,MALD,IAKC,MAJTC,WAAAA,OAIS,MAJI,EAIJ,MAHTC,OAAAA,OAGS,MAHA,EAGA,MAFTpB,KAAAA,OAES,aADTqB,MAAAA,OACS,MADD,EACC,EACHC,EAAWR,EAAAA,SACjB,EAAgCA,EAAAA,SAAc,WAU5C,IATA,IAAMS,EAAY,GACZC,EAAS,GACTC,EAAQC,MAAMC,KAAK,CACvBC,OAAQV,IACP,kBAAO,GAAM,GAAMT,KAAKE,UAAYS,CAApC,IACGS,EAAQ,IAAIC,EAAAA,MACdzB,EAAIW,EAASC,EACXc,EAAYd,EAAQC,EAEjBc,EAAI,EAAGA,EAAId,EAAOc,IACzB3B,GAAK0B,EAAYtB,KAAKE,SACtBY,EAAUU,KAAV,MAAAV,GAAS,OAASnB,EAAQC,GAAG6B,YAC7BL,EAAMM,OAAOH,EAAId,EAAOC,EAAY,IACpCK,EAAOS,KAAKJ,EAAMxB,EAAGwB,EAAMO,EAAGP,EAAMQ,GAGtC,MAAO,CAAC,IAAIC,aAAaf,GAAY,IAAIe,aAAad,GAAS,IAAIc,aAAab,GACjF,GAAE,CAACP,EAAOD,EAAOG,EAAQJ,EAAQG,IAlBlC,eAAOoB,EAAP,KAAiBV,EAAjB,KAAwBW,EAAxB,MAmBAC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIpB,EAASqB,UAAYrB,EAASqB,QAAQ9C,SAASC,KAAKC,MAAQ2C,EAAME,MAAMC,iBAAmBxB,EAA/F,IACd,MAA4BP,EAAAA,UAAe,kBAAM,IAAIlB,CAAV,IAApCkD,GAAP,eACA,OAAoBhC,EAAAA,cAAoB,SAAU,CAChDC,IAAKA,GACSD,EAAAA,cAAoB,iBAAkB,KAAmBA,EAAAA,cAAoB,kBAAmB,CAC9GiC,OAAQ,sBACRC,KAAM,CAACT,EAAU,KACFzB,EAAAA,cAAoB,kBAAmB,CACtDiC,OAAQ,mBACRC,KAAM,CAACnB,EAAO,KACCf,EAAAA,cAAoB,kBAAmB,CACtDiC,OAAQ,kBACRC,KAAM,CAACR,EAAM,MACG1B,EAAAA,cAAoB,YAAa,CACjDC,IAAKO,EACL2B,OAAQH,EACRC,OAAQ,WACRG,SAAUC,EAAAA,iBACV,sBAAuBnD,EACvBoD,aAAa,EACbC,cAAc,IAEjB,I,SCvFD,EAVc,WACZ,OACE,gBAAKC,UAAU,YAAf,UACI,SAAC,KAAD,WACE,SAACzC,EAAD,OAIT,C","sources":["../node_modules/@react-three/drei/core/Stars.js","Components/Pages/Stars.js"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n","import '../../scss/stars.scss'\r\nimport Header from '../Header'\r\n\r\nimport { useState, useRef } from 'react'\r\nimport { Canvas, useFrame } from '@react-three/fiber'\r\nimport { Stars,Points, PointMaterial } from '@react-three/drei'\r\n// import * as random from 'maath/random/dist/maath-random.esm'\r\nconst About = () => {\r\n  return (\r\n    <div className='home-page'>\r\n        <Canvas>\r\n          <Stars />\r\n      </Canvas>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About"],"names":["StarfieldMaterial","uniforms","time","value","fade","vertexShader","fragmentShader","ShaderMaterial","genStar","r","Vector3","setFromSpherical","Spherical","Math","acos","random","PI","Stars","React","ref","radius","depth","count","saturation","factor","speed","material","positions","colors","sizes","Array","from","length","color","Color","increment","i","push","toArray","setHSL","g","b","Float32Array","position","size","useFrame","state","current","clock","getElapsedTime","starfieldMaterial","attach","args","object","blending","AdditiveBlending","transparent","vertexColors","className"],"sourceRoot":""}